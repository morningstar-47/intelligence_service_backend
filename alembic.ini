# alembic.ini
# Une configuration Alembic de base qui fonctionne avec la structure de notre projet

[alembic]
# Chemin du script de configuration d'Alembic
script_location = alembic

# Version du template utilisée pour générer les fichiers de migration
# file_template = %%(rev)s_%%(slug)s

# Format d'horodatage utilisé pour la valeur create_date dans les modèles
# file_template = %%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s

# URL de la base de données
# Définie dans env.py pour utiliser les variables d'environnement
sqlalchemy.url = driver://user:pass@localhost/dbname

# Répertoire de sortie pour les fichiers de migration
# output_encoding = utf-8

# Configuration du préfixe pour les noms des tables générés
# prefix = 

[post_write_hooks]
# Les hooks post-write sont des scripts ou des commandes qui seront exécutés
# après avoir écrit un fichier de migration.
# hooks = mymodule.plugin:function, othermodule.plugin:function

# Format des messages de transformation. Si le paramètre 'hooks' est défini,
# alors les arguments pour le hook seront $(hook_name) et $(hook_arguments)
# hooks_version = 1

# Cette section est configurée spécifiquement pour flake8
# [post_write_hooks.flake8]
# hooks = flake8
# entry_point = flake8

# Cette section est configurée spécifiquement pour black
# [post_write_hooks.black]
# hooks = black
# entry_point = black

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S